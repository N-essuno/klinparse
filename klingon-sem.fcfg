% start S
############################
# Grammar Rules
#############################

S[SEM = <?vp(?subj)>] -> NP[SEM=?subj] VP[SEM=?vp]
S[SEM = <?detNoun(?vp)>] -> DetNoun[SEM=?detNoun] VP[SEM=?vp]
S[SEM = <?detNounC(?vp)>] -> DetNounCompound[SEM=?detNounC] VP[SEM=?vp]
S[SEM = <?vc(?subj)>] -> NP[SEM=?subj] VerbCompound[SEM=?vc]

DetNounCompound[SEM=<?detNoun(?nounSuffix)>] -> DetNoun[SEM=?detNoun] NounSuffix[SEM=?nounSuffix]

VerbCompound[SEM=<?v(?verbSuffix)>] -> IV[SEM=?v] VerbSuffix[SEM=?verbSuffix]

NP[SEM=<?det(?nom)> ] -> Det[SEM=?det]  Nom[SEM=?nom]
NP[SEM=?np] -> PropN[SEM=?np]


Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]

VP[SEM=?v] -> TB[SEM=?v]

VP[SEM=<?v(?obj)>] -> TV[SEM=?v] NP[SEM=?obj]

#############################
# Lexical Rules
#############################

# These 2 expression capture the meaning that all the entities in the sentence
#   that are of the same type (children or rooms) refer to the same entity
#   It is the semantic representation of "the" before a noun
DetNoun[SEM=<\Q.exists c.((child(c) & Q(c)) & all y.(child(y) -> (c = y)))>] -> "puq"

DetNoun[SEM=<\Q\R.exists r.((room(r) & exists e.(Q(e)(r) & R(e)) & all y.(room(y) -> (r = y))))>] -> "pa'"

PropN[SEM=<\P.P(klingon_language)>] -> "tlhInganHol"
PropN[SEM=<\P.P(klingon)>] -> "tlhIngan"
PropN[SEM=<\P.P(me)>] -> "jIH"

NounSuffix[SEM=<\x\y.proximity(x,y)>] -> "Daq"


# I am
IV[SEM=<\x.being(x,me)>] -> "jIHtaH"
# to speak
IV[SEM=<\Q\X.exists e.(X(\x.speak(you,x)) & Q(e))>] -> "Dajatlh"


# to see
TV[SEM=<\X x.X(\y.see(y,x))>] -> "vIlegh"

# we are
TB[SEM=<\R.R(\y.being(we,y))>] -> "maH"

# interrogative verb suffix
VerbSuffix[SEM=<\x.interrogative(x)>] -> "'a'"

























# VerbPrefix[SEM=<\X x.X(\y.2nd_3rd(x,y))>,TNS=pres] -> "Da"
# VerbPrefix[SEM=<\X x.X(\y.1st_3rd(x,y))>,TNS=pres] -> "vI"

# Handling VerbPrefixes means we need to take care of SUBJ and OBJ NUM
# VerbPrefix[SEM=<\x.2nd_3rd(x)>] -> "Da"
# VerbPrefix[SEM=<\x.1st_3rd(x)>] -> "vI"

# VerbSuffix[SEM=<\x.interrogative(x)>] -> "'a'" # Interrogative

# Mapping taH suffix means handling Verb tense, we are not doing that
# VerbSuffix[SEM=<\x.continuous(x)>] -> "taH" ###

# VerbCompound[NUM=sg,SEM=<\x.1st_3rd(x)>] -> VerbPrefix IV[NUM=sg]
# VerbCompound[NUM=pl,SEM=<\x.1st_3rd(x)>] -> VerbPrefix IV[NUM=pl]