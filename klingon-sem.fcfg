% start S
############################
# Grammar Rules
#############################

S[SEM = <?subj(?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]

NP[NUM=?n,SEM=<?det(?nom)> ] -> Det[NUM=?n,SEM=?det]  Nom[NUM=?n,SEM=?nom]
NP[LOC=?l,NUM=?n,SEM=?np] -> PropN[LOC=?l,NUM=?n,SEM=?np]

Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]

VP[NUM=?n,SEM=?v] -> IV[NUM=?n,SEM=?v]
VP[NUM=?n,SEM=<?v(?obj)>] -> TV[NUM=?n,SEM=?v] NP[SEM=?obj]
VP[NUM=?n,SEM=<?v(?obj,?pp)>] -> DTV[NUM=?n,SEM=?v] NP[SEM=?obj] PP[+TO,SEM=?pp]

PP[+TO, SEM=?np] -> P[+TO] NP[SEM=?np]

#############################
# Lexical Rules
#############################

# These 2 expression capture the meaning that all the entities in the sentence
#   that are of the same type (children or rooms) refer to the same entity
#   It is the semantic representation of "the" before a noun
Noun[NUM=sg,SEM=<\Q.exists x.((child(x) & Q(x)) & all y.(child(y) -> (x = y)))>] -> "puq"
Noun[NUM=sg,SEM=<\Q.exists x.((room(x) & Q(x)) & all y.(room(y) -> (x = y)))>] -> "pa'"

PropN[NUM=sg,SEM=<\P.P(klingon_language)>] -> "tlhIngan Hol"
PropN[NUM=sg,SEM=<\P.P(klingon)>] -> "tlhIngan"

# TODO: check
NounSuffix[NUM=sg,SEM=<\X x.X(\y.in_proximity_of(x,y)>] -> "Daq"

# TODO: check
Pronoun[NUM=sg,SEM=<\P.P(i)>] -> "jIH"

# Ee being(e, I) ^ in_proximity_of(e, room)

IV[NUM=sg,SEM=<exists e.being(e,I)>,TNS=pres] -> "jIHtaH" # I am
IV[NUM=pl,SEM=<\x.we_are(x)>,TNS=pres] -> "maH" # we are

TV[NUM=sg,SEM=<\X x.X(\y.see(x,y))>,TNS=pres] -> "legh" # to see
TV[NUM=sg,SEM=<\X x.X(\y.speak(x,y))>,TNS=pres] -> "jatlh" # to speak

# VerbPrefix[SEM=<\X x.X(\y.2nd_3rd(x,y))>,TNS=pres] -> "Da"
# VerbPrefix[SEM=<\X x.X(\y.1st_3rd(x,y))>,TNS=pres] -> "vI"

# Handling VerbPrefixes means we need to take care of SUBJ and OBJ NUM
# VerbPrefix[SEM=<\x.2nd_3rd(x)>] -> "Da"
# VerbPrefix[SEM=<\x.1st_3rd(x)>] -> "vI"

VerbSuffix[SEM=<\x.interrogative(x)>] -> "'a'" # Interrogative

# Mapping taH suffix means handling Verb tense, we are not doing that
# VerbSuffix[SEM=<\x.continuous(x)>] -> "taH" ###

# VerbCompound[NUM=sg,SEM=<\x.1st_3rd(x)>] -> VerbPrefix IV[NUM=sg]
# VerbCompound[NUM=pl,SEM=<\x.1st_3rd(x)>] -> VerbPrefix IV[NUM=pl]